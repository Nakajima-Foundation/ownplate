rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAdmin(request) {
      return request.auth.uid != null && request.auth.token.email != null
    }

    function isUser(request) {
      return request.auth.uid != null && request.auth.token.phone_number != null
    }

    function isOwner(resource, request) {
      return resource.data.uid == request.auth.uid;
    }

    function isRestaurantOwner(restaurantsId, request) {
      return get(/databases/$(database)/documents/restaurants/$(restaurantsId)).data.uid == request.auth.uid;
    }

    match /users/{userId} {
      allow read, write: if request.auth.uid == userId;
      match /public {
        allow read: if true;
        allow write: if request.auth.uid == userId;
      }
      match /private {
        allow read, write: if request.auth.uid == userId;
        match /profile {
          allow read: if request.auth.uid == userId;
          allow write: if request.auth.uid == userId
            && request.resource.data.phoneNumber == request.auth.token.phone_number;
        }
      }
      match /readonly {
        allow read: if request.auth.uid == userId;
      }
      match /system {
        allow read, write: if false;
      }
    }

    match /admins/{userId} {
      allow read, write: if request.auth.uid == userId;
      match /public {
        allow read: if true;
        allow write: if request.auth.uid == userId;
      }
      match /private {
        allow read, write: if request.auth.uid == userId;
        match /profile {
          allow read: if request.auth.uid == userId;
          allow write: if request.auth.uid == userId
            && request.resource.data.email == request.auth.token.email;
        }
      }
      match /readonly {
        allow read: if request.auth.uid == userId;
      }
      match /system {
        allow read, write: if false;
      }
    }

    match /restaurants/{restaurantsId} {
      allow read: if true
      allow create: if isAdmin(request)
                      && request.resource.data.uid == request.auth.uid;
      allow update: if isAdmin(request) && isOwner(resource, request);
      match /menus/{menuId} {
        allow read: if true
        allow create: if isAdmin(request)
        allow update: if isAdmin(request) && isOwner(resource, request);
      }
      match /titles/{titleId} {
        allow read: if true
        allow create: if isAdmin(request)
        allow update: if isAdmin(request) && isOwner(resource, request);
      }
      match /orders/{orderId} {
        allow create: if isUser(request)
                        && request.resource.data.uid == request.auth.uid;
        allow read: if isAdmin(request)
                        && isRestaurantOwner(restaurantsId, request);
        allow read: if isUser(request) && isOwner(resource, request);
        allow delete: if isOwner(resource, request)
                        && resource.data.status == 200; // validated
        allow update: if isOwner(resource, request)
                        && resource.data.status == 200
                        && request.resource.data.status == 300; // HACK: Temporary During no-sprite Testing
        allow update: if isAdmin(request)
                        && isRestaurantOwner(restaurantsId, request);
      }
    }


    match /{document=**} {
      allow read, write: if false;
    }
  }
}
